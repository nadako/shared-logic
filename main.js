// Generated by Haxe 4.0.0 (git build development @ 035eda0)
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DbChanges = function() {
	this.changes = [];
};
var ValueBase = function() { };
ValueBase.prototype = {
	__link: function(parent,name) {
		if(this.__parent != null) {
			throw new js__$Boot_HaxeError("Object is already linked");
		}
		this.__parent = parent;
		this.__name = name;
		this.__setup(this.__parent.__transaction,this.__parent.__dbChanges);
	}
	,__unlink: function() {
		this.__parent = null;
		this.__name = null;
	}
	,__setup: function(transaction,dbChanges) {
		this.__transaction = transaction;
		this.__dbChanges = dbChanges;
	}
	,__makeFieldPath: function(field) {
		var path = [field];
		var object = this;
		while(object.__parent != null) {
			path.push(object.__name);
			object = object.__parent;
		}
		path.reverse();
		return path;
	}
};
var Value = function() { };
Value.__super__ = ValueBase;
Value.prototype = $extend(ValueBase.prototype,{
});
var GameData = function() {
};
GameData.__super__ = Value;
GameData.prototype = $extend(Value.prototype,{
	set_player: function(value) {
		var _gthis = this;
		var oldValue = this.player;
		if(oldValue != value) {
			if(oldValue != null) {
				oldValue.__unlink();
			}
			if(value != null) {
				value.__link(this,"player");
			}
			this.player = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.player = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				this.__dbChanges.changes.push({ path : this.__makeFieldPath("player"), value : value != null ? value.__toRawValue() : null});
			}
		}
		return value;
	}
	,__setup: function(transaction,dbChanges) {
		this.__transaction = transaction;
		this.__dbChanges = dbChanges;
		if(this.player != null) {
			this.player.__setup(transaction,dbChanges);
		}
	}
});
var Player = function(name) {
	this.set_name(name);
	this.set_resources(new Resources());
};
Player.__super__ = Value;
Player.prototype = $extend(Value.prototype,{
	set_name: function(value) {
		var _gthis = this;
		var oldValue = this.name;
		if(oldValue != value) {
			this.name = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.name = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				this.__dbChanges.changes.push({ path : this.__makeFieldPath("name"), value : value != null ? value : null});
			}
		}
		return value;
	}
	,set_resources: function(value) {
		var _gthis = this;
		var oldValue = this.resources;
		if(oldValue != value) {
			if(oldValue != null) {
				oldValue.__unlink();
			}
			if(value != null) {
				value.__link(this,"resources");
			}
			this.resources = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.resources = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				this.__dbChanges.changes.push({ path : this.__makeFieldPath("resources"), value : value != null ? value.__toRawValue() : null});
			}
		}
		return value;
	}
	,__setup: function(transaction,dbChanges) {
		this.__transaction = transaction;
		this.__dbChanges = dbChanges;
		if(this.resources != null) {
			this.resources.__setup(transaction,dbChanges);
		}
	}
	,__toRawValue: function() {
		var raw = { };
		if(this.name != null) {
			raw.name = this.name;
		}
		if(this.resources != null) {
			raw.resources = this.resources.__toRawValue();
		}
		return raw;
	}
});
var Resources = function() {
	this.set_gold(0);
};
Resources.__super__ = Value;
Resources.prototype = $extend(Value.prototype,{
	set_gold: function(value) {
		var _gthis = this;
		var oldValue = this.gold;
		if(oldValue != value) {
			this.gold = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.gold = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				this.__dbChanges.changes.push({ path : this.__makeFieldPath("gold"), value : value});
			}
		}
		return value;
	}
	,__toRawValue: function() {
		var raw = { };
		raw.gold = this.gold;
		return raw;
	}
});
var Main = function() { };
Main.main = function() {
	var data = new GameData();
	data.__setup(new Transaction(),new DbChanges());
	data.set_player(new Player("Dan"));
	data.player.set_name("John");
	data.player.resources.set_gold(100);
};
var Transaction = function() {
	this.rollbacks = [];
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
Main.main();
})();
