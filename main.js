// Generated by Haxe 4.0.0 (git build development @ 035eda0)
(function () { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var ValueBase = function() { };
ValueBase.prototype = {
	__link: function(parent,name) {
		if(this.__parent != null) {
			throw new js__$Boot_HaxeError("Object is already linked");
		}
		this.__parent = parent;
		this.__name = name;
		this.__setup(this.__parent.__transaction,this.__parent.__dbChanges);
	}
	,__unlink: function() {
		this.__parent = null;
		this.__name = null;
		this.__dbChanges = null;
	}
	,__setup: function(transaction,dbChanges) {
		this.__transaction = transaction;
		this.__dbChanges = dbChanges;
	}
	,__toRawValue: function() {
		return { };
	}
	,__makeFieldPath: function(path) {
		var object = this;
		while(object.__parent != null) {
			path.push(object.__name);
			object = object.__parent;
		}
		path.reverse();
		return path;
	}
};
var ArrayValue = function() {
	this.array = [];
};
ArrayValue.__fromRawValue = function(raw,converter) {
	var instance = new ArrayValue();
	var _g = 0;
	var _g1 = raw;
	while(_g < _g1.length) {
		var value = _g1[_g];
		++_g;
		instance.array.push(converter != null ? converter.fromRawValue(value) : value);
	}
	return instance;
};
ArrayValue.__super__ = ValueBase;
ArrayValue.prototype = $extend(ValueBase.prototype,{
	push: function(value) {
		var _gthis = this;
		var name = "" + this.array.length;
		var result = this.array.push(value);
		if(this.helper != null) {
			this.helper.link(value,this,name);
		}
		if(this.__transaction != null) {
			this.__transaction.rollbacks.push(function() {
				return _gthis.array.pop();
			});
		}
		if(this.__dbChanges != null) {
			this.__dbChanges.changes.push({ kind : "push", path : this.__makeFieldPath([]), value : this.helper != null ? this.helper.toRawValue(value) : value});
		}
		return result;
	}
	,__toRawValue: function() {
		var raw = [];
		var _g = 0;
		var _g1 = this.array;
		while(_g < _g1.length) {
			var value = _g1[_g];
			++_g;
			raw.push(this.helper != null ? this.helper.toRawValue(value) : value);
		}
		return raw;
	}
});
var DbChanges = function() {
	this.changes = [];
};
DbChanges.prototype = {
	commit: function() {
		var committedChanges = this.changes;
		this.changes = [];
		return committedChanges;
	}
};
var RawValueConverter = function() { };
var Helper = function() { };
var Value = function() { };
Value.__super__ = ValueBase;
Value.prototype = $extend(ValueBase.prototype,{
});
var SomeEntry = function() {
};
SomeEntry.__fromRawValue = function(raw) {
	var instance = Object.create(SomeEntry.prototype);
	instance.set_value(raw.value);
	return instance;
};
SomeEntry.__super__ = Value;
SomeEntry.prototype = $extend(Value.prototype,{
	set_value: function(value) {
		var _gthis = this;
		var oldValue = this.value;
		if(oldValue != value) {
			this.value = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.value = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				var fieldPath = this.__makeFieldPath(["value"]);
				this.__dbChanges.changes.push(value != null ? { kind : "set", path : fieldPath, value : value} : { kind : "delete", path : fieldPath});
			}
		}
		return value;
	}
	,__toRawValue: function() {
		var raw = { };
		if(this.value != null) {
			raw.value = this.value;
		}
		return raw;
	}
});
var GameData = function() {
};
GameData.fromRawValue = function(raw) {
	return GameData.__fromRawValue(raw);
};
GameData.__fromRawValue = function(raw) {
	var instance = Object.create(GameData.prototype);
	instance.set_player(Player.__fromRawValue(raw.player));
	instance.set_items(ArrayValue.__fromRawValue(raw.items,SomeEntry_$_$RawValueConverter.instance));
	return instance;
};
GameData.__super__ = Value;
GameData.prototype = $extend(Value.prototype,{
	set_player: function(value) {
		var _gthis = this;
		var oldValue = this.player;
		if(oldValue != value) {
			if(oldValue != null) {
				oldValue.__unlink();
			}
			if(value != null) {
				value.__link(this,"player");
			}
			this.player = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.player = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				var fieldPath = this.__makeFieldPath(["player"]);
				this.__dbChanges.changes.push(value != null ? { kind : "set", path : fieldPath, value : value.__toRawValue()} : { kind : "delete", path : fieldPath});
			}
		}
		return value;
	}
	,set_items: function(value) {
		var _gthis = this;
		var oldValue = this.items;
		if(oldValue != value) {
			if(oldValue != null) {
				oldValue.__unlink();
			}
			if(value != null) {
				value.helper = ValueHelper.instance;
				value.__link(this,"items");
			}
			this.items = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.items = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				var fieldPath = this.__makeFieldPath(["items"]);
				this.__dbChanges.changes.push(value != null ? { kind : "set", path : fieldPath, value : value.__toRawValue()} : { kind : "delete", path : fieldPath});
			}
		}
		return value;
	}
	,__setup: function(transaction,dbChanges) {
		this.__transaction = transaction;
		this.__dbChanges = dbChanges;
		if(this.player != null) {
			this.player.__setup(transaction,dbChanges);
		}
		if(this.items != null) {
			this.items.__setup(transaction,dbChanges);
		}
	}
	,__toRawValue: function() {
		var raw = { };
		if(this.player != null) {
			raw.player = this.player.__toRawValue();
		}
		if(this.items != null) {
			raw.items = this.items.__toRawValue();
		}
		return raw;
	}
});
var Player = function(name) {
	this.set_name(name);
	this.set_resources(new Resources());
};
Player.__fromRawValue = function(raw) {
	var instance = Object.create(Player.prototype);
	instance.set_name(raw.name);
	instance.set_resources(Resources.__fromRawValue(raw.resources));
	return instance;
};
Player.__super__ = Value;
Player.prototype = $extend(Value.prototype,{
	set_name: function(value) {
		var _gthis = this;
		var oldValue = this.name;
		if(oldValue != value) {
			this.name = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.name = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				var fieldPath = this.__makeFieldPath(["name"]);
				this.__dbChanges.changes.push(value != null ? { kind : "set", path : fieldPath, value : value} : { kind : "delete", path : fieldPath});
			}
		}
		return value;
	}
	,set_resources: function(value) {
		var _gthis = this;
		var oldValue = this.resources;
		if(oldValue != value) {
			if(oldValue != null) {
				oldValue.__unlink();
			}
			if(value != null) {
				value.__link(this,"resources");
			}
			this.resources = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.resources = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				var fieldPath = this.__makeFieldPath(["resources"]);
				this.__dbChanges.changes.push(value != null ? { kind : "set", path : fieldPath, value : value.__toRawValue()} : { kind : "delete", path : fieldPath});
			}
		}
		return value;
	}
	,__setup: function(transaction,dbChanges) {
		this.__transaction = transaction;
		this.__dbChanges = dbChanges;
		if(this.resources != null) {
			this.resources.__setup(transaction,dbChanges);
		}
	}
	,__toRawValue: function() {
		var raw = { };
		if(this.name != null) {
			raw.name = this.name;
		}
		if(this.resources != null) {
			raw.resources = this.resources.__toRawValue();
		}
		return raw;
	}
});
var Resources = function() {
	this.set_gold(0);
};
Resources.__fromRawValue = function(raw) {
	var instance = Object.create(Resources.prototype);
	instance.set_gold(raw.gold);
	return instance;
};
Resources.__super__ = Value;
Resources.prototype = $extend(Value.prototype,{
	set_gold: function(value) {
		var _gthis = this;
		var oldValue = this.gold;
		if(oldValue != value) {
			this.gold = value;
			if(this.__transaction != null) {
				this.__transaction.rollbacks.push(function() {
					return _gthis.gold = oldValue;
				});
			}
			if(this.__dbChanges != null) {
				this.__dbChanges.changes.push({ kind : "set", path : this.__makeFieldPath(["gold"]), value : value});
			}
		}
		return value;
	}
	,__toRawValue: function() {
		var raw = { };
		raw.gold = this.gold;
		return raw;
	}
});
var Main = function() { };
Main.main = function() {
	var data = GameData.__fromRawValue({ player : { name : "Dan", resources : { gold : 1000}}, items : []});
	var dbChanges = new DbChanges();
	data.__setup(new Transaction(),dbChanges);
	data.items.push(new SomeEntry());
	data.items.array[0].set_value("SOME");
	console.log("Main.hx:65:",JSON.stringify(dbChanges.commit()));
	console.log("Main.hx:66:",JSON.stringify(data.__toRawValue()));
};
var SomeEntry_$_$RawValueConverter = function() {
};
SomeEntry_$_$RawValueConverter.__interfaces__ = [RawValueConverter];
SomeEntry_$_$RawValueConverter.prototype = {
	fromRawValue: function(raw) {
		return SomeEntry.__fromRawValue(raw);
	}
};
var Transaction = function() {
	this.rollbacks = [];
};
var ValueHelper = function() {
};
ValueHelper.__interfaces__ = [Helper];
ValueHelper.prototype = {
	link: function(value,parent,name) {
		value.__link(parent,name);
	}
	,toRawValue: function(value) {
		return value.__toRawValue();
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
SomeEntry_$_$RawValueConverter.instance = new SomeEntry_$_$RawValueConverter();
ValueHelper.instance = new ValueHelper();
Main.main();
})();
